version: '3.8'

services:
  perplexica-frontend:
    build:
      context: ./ui
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    deploy:
      resources:
        limits:
          memory: 4GB
        reservations:
          memory: 2GB
    depends_on:
      perplexica-backend:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3

  perplexica-backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    ports:
      - "3001:3001"
    volumes:
      - ./backend:/app
      - /app/node_modules
    environment:
      - NODE_ENV=development
      - DATABASE_URL=file:data/perplexica.db
    deploy:
      resources:
        limits:
          memory: 12GB
        reservations:
          memory: 8GB
    depends_on:
      qdrant:
        condition: service_healthy
      searxng:
        condition: service_healthy
      ocr-service:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  searxng:
    image: searxng/searxng:latest
    ports:
      - "8080:8080"
    volumes:
      - ./searxng/settings.yml:/etc/searxng/settings.yml:ro
      - ./searxng/limiter.toml:/etc/searxng/limiter.toml:ro
    environment:
      - SEARXNG_BASE_URL=http://localhost:8080/
      - SEARXNG_HOSTNAME=0.0.0.0
      - SEARXNG_WORKER_CLASS=sync
      - SEARXNG_WORKERS=2
      - SEARXNG_WORKER_TIMEOUT=30
      - INIT_TIMEOUT=30
    deploy:
      resources:
        limits:
          memory: 2GB
        reservations:
          memory: 1GB
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://0.0.0.0:8080/healthz"]
      interval: 15s
      timeout: 10s
      retries: 3
      start_period: 60s

  qdrant:
    image: qdrant/qdrant:v1.7.3
    ports:
      - "6333:6333"
      - "6334:6334"
    volumes:
      - ./storage:/qdrant/storage
    environment:
      - QDRANT_ALLOW_RECOVERY_MODE=true
      - QDRANT_STORAGE__PERFORMANCE__MAX_OPTIMIZATION_THREADS=4
      - QDRANT_STORAGE__PERFORMANCE__MEMMAP_THRESHOLD=10000
    deploy:
      resources:
        limits:
          memory: 8GB
        reservations:
          memory: 4GB
    healthcheck:
      test: ["CMD", "curl", "-f", "http://0.0.0.0:6333/healthz"]
      interval: 15s
      timeout: 10s
      retries: 3
      start_period: 45s

  ocr-service:
    build:
      context: ./ocr
      dockerfile: Dockerfile
      args:
        BUILDPLATFORM: linux/arm64/v8
        TARGETPLATFORM: linux/arm64/v8
    platform: linux/arm64/v8
    ports:
      - "8082:8000"
    volumes:
      - ./ocr/temp:/app/temp
      - ocr_models_cache:/app/models_cache
      - /tmp/.X11-unix:/tmp/.X11-unix  # For MLX GPU passthrough
    environment:
      - PADDLE_OCR_CACHE_DIR=/app/models_cache
      - PADDLE_OCR_DOWNLOAD_TIMEOUT=60
      - PADDLE_OCR_USE_CACHE=true
      - PYTHONUNBUFFERED=1
      - OCR_WORKER_THREADS=4
      - PADDLE_INFERENCE_USE_MLX=1
      - PADDLE_INFERENCE_MLX_THREADS=4
      - PADDLE_INFERENCE_MLX_CACHE_CAPACITY=2048
      - PADDLE_INFERENCE_MLX_WORKSPACE_SIZE=4096
      - DISPLAY=:0  # For MLX GPU passthrough
    deploy:
      resources:
        limits:
          memory: 8GB
          cpus: '4'
        reservations:
          memory: 4GB
          cpus: '2'
    ulimits:
      memlock: -1
      stack: 67108864
    healthcheck:
      test: ["CMD", "wget", "-q", "--spider", "http://localhost:8000/health"]
      interval: 15s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped

  prometheus:
    image: prom/prometheus:v2.48.1
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    ports:
      - "9090:9090"
    deploy:
      resources:
        limits:
          memory: 2GB
        reservations:
          memory: 1GB
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "-q", "--spider", "http://localhost:9090/-/healthy"]
      interval: 10s
      timeout: 5s
      retries: 3

  grafana:
    image: grafana/grafana:10.2.3
    ports:
      - "3002:3000"
    volumes:
      - ./grafana/provisioning:/etc/grafana/provisioning
      - ./grafana/dashboards:/var/lib/grafana/dashboards
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    deploy:
      resources:
        limits:
          memory: 1GB
        reservations:
          memory: 512MB
    depends_on:
      prometheus:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "-q", "--spider", "http://localhost:3000/api/health"]
      interval: 10s
      timeout: 5s
      retries: 3

  node-exporter:
    image: prom/node-exporter:v1.7.0
    ports:
      - "9100:9100"
    healthcheck:
      test: ["CMD", "wget", "-q", "--spider", "http://localhost:9100/metrics"]
      interval: 10s
      timeout: 5s
      retries: 3

  promtail:
    image: grafana/promtail:2.9.3
    ports:
      - "9080:9080"
    volumes:
      - ./promtail/config.yml:/etc/promtail/config.yml
      - /var/log:/var/log
    command: -config.file=/etc/promtail/config.yml
    deploy:
      resources:
        limits:
          memory: 512MB
        reservations:
          memory: 256MB
    restart: unless-stopped
    depends_on:
      - loki
    healthcheck:
      test: ["CMD", "curl", "-f", "http://0.0.0.0:9080/ready"]
      interval: 30s
      timeout: 10s
      retries: 3

  loki:
    image: grafana/loki:2.9.3
    ports:
      - "3100:3100"
    volumes:
      - ./loki:/etc/loki
      - loki_data:/loki
    command: -config.file=/etc/loki/local-config.yaml
    deploy:
      resources:
        limits:
          memory: 1GB
        reservations:
          memory: 512MB
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "-q", "--spider", "http://localhost:3100/ready"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  prometheus_data:
  grafana_data:
  loki_data:
  ocr_models_cache: 